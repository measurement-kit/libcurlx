# Autogenerated file; DO NOT EDIT!
cmake_minimum_required(VERSION 3.12.0)
project("mkcurl")

include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(CheckCXXCompilerFlag)
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)
list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)
if("${WIN32}")
  list(APPEND CMAKE_REQUIRED_LIBRARIES ws2_32 crypt32)
  if("${MINGW}")
    list(APPEND CMAKE_REQUIRED_LIBRARIES -static-libgcc -static-libstdc++)
  endif()
endif()

#
# ca-bundle.pem
#

message(STATUS "MkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/etc")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/etc"
  RESULT_VARIABLE FAILURE)
if("${FAILURE}")
  message(FATAL_ERROR "${FAILURE}")
endif()

message(STATUS "Download: https://curl.haxx.se/ca/cacert-2018-12-05.pem")
file(DOWNLOAD https://curl.haxx.se/ca/cacert-2018-12-05.pem
  "${CMAKE_BINARY_DIR}/.mkbuild/etc/ca-bundle.pem"
  EXPECTED_HASH SHA256=4d89992b90f3e177ab1d895c00e8cded6c9009bec9d56981ff4f0a59e9cc56d6
  TLS_VERIFY ON)


#
# argh.h
#

message(STATUS "MkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE)
if("${FAILURE}")
  message(FATAL_ERROR "${FAILURE}")
endif()

message(STATUS "Download: https://raw.githubusercontent.com/adishavit/argh/v1.3.0/argh.h")
file(DOWNLOAD https://raw.githubusercontent.com/adishavit/argh/v1.3.0/argh.h
  "${CMAKE_BINARY_DIR}/.mkbuild/include/argh.h"
  EXPECTED_HASH SHA256=ddb7dfc18dcf90149735b76fb2cff101067453a1df1943a6911233cb7085980c
  TLS_VERIFY ON)

LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("argh.h" MK_HAVE_ARGH_H)
if(NOT ("${MK_HAVE_ARGH_H}"))
  message(FATAL_ERROR "cannot find: argh.h")
endif()


#
# catch.hpp
#

message(STATUS "MkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE)
if("${FAILURE}")
  message(FATAL_ERROR "${FAILURE}")
endif()

message(STATUS "Download: https://github.com/catchorg/Catch2/releases/download/v2.3.0/catch.hpp")
file(DOWNLOAD https://github.com/catchorg/Catch2/releases/download/v2.3.0/catch.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/catch.hpp"
  EXPECTED_HASH SHA256=5eb8532fd5ec0d28433eba8a749102fd1f98078c5ebf35ad607fb2455a000004
  TLS_VERIFY ON)

LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("catch.hpp" MK_HAVE_CATCH_HPP)
if(NOT ("${MK_HAVE_CATCH_HPP}"))
  message(FATAL_ERROR "cannot find: catch.hpp")
endif()


#
# libcurl
#

if(("${WIN32}"))
  message(STATUS "MkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE)
  if("${FAILURE}")
    message(FATAL_ERROR "${FAILURE}")
  endif()
  
  message(STATUS "Download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl.tar.gz"
    EXPECTED_HASH SHA256=424d2f18f0f74dd6a0128f0f4e59860b7d2f00c80bbf24b2702e9cac661357cf
    TLS_VERIFY ON)
  
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE)
  if("${FAILURE}")
    message(FATAL_ERROR "${FAILURE}")
  endif()
  
  if(("${CMAKE_SIZEOF_VOID_P}" EQUAL 4))
    SET(MK_CURL_ARCH "x86")
  else()
    SET(MK_CURL_ARCH "x64")
  endif()
  
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_CURL_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_CURL_CURL_H)
  if(NOT ("${MK_HAVE_CURL_CURL_H}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_CURL_ARCH}/lib/libcurl.lib" "curl_easy_init" "" MK_HAVE_LIBCURL)
  if(NOT ("${MK_HAVE_LIBCURL}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_CURL_ARCH}/lib/libcurl.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_CURL_ARCH}/lib/libcurl.lib")
  LIST(APPEND CMAKE_REQUIRED_DEFINITIONS -DCURL_STATICLIB)

else()
 CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_CURL_CURL_H)
 if(NOT ("${MK_HAVE_CURL_CURL_H}"))
   message(FATAL_ERROR "cannot find: curl/curl.h")
 endif()
 CHECK_LIBRARY_EXISTS("curl" "curl_easy_init" "" MK_HAVE_LIBCURL)
 if(NOT ("${MK_HAVE_LIBCURL}"))
   message(FATAL_ERROR "cannot find: curl")
 endif()
 LIST(APPEND CMAKE_REQUIRED_LIBRARIES "curl")
endif()

#
# mkmock.hpp
#

message(STATUS "MkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE)
if("${FAILURE}")
  message(FATAL_ERROR "${FAILURE}")
endif()

message(STATUS "Download: https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkmock.hpp"
  EXPECTED_HASH SHA256=f07bc063a2e64484482f986501003e45ead653ea3f53fadbdb45c17a51d916d2
  TLS_VERIFY ON)

LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkmock.hpp" MK_HAVE_MKMOCK_HPP)
if(NOT ("${MK_HAVE_MKMOCK_HPP}"))
  message(FATAL_ERROR "cannot find: mkmock.hpp")
endif()


#
# set restrictive compiler flags
#

macro(MkSetCompilerFlags)
  if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR
     ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang"))
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Werror")
    # https://www.owasp.org/index.php/C-Based_Toolchain_Hardening_Cheat_Sheet
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wall")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wextra")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wconversion")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wcast-align")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat=2")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat-security")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fno-common")
    # Some options are only supported by GCC when we're compiling C code:
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-prototypes")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-prototypes")
    else()
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wmissing-prototypes")
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wstrict-prototypes")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-declarations")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-overflow")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wtrampolines")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Woverloaded-virtual")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wreorder")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wsign-promo")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wnon-virtual-dtor")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fstack-protector-all")
    if(NOT "${APPLE}")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,noexecstack")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,now")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,relro")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodlopen")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodump")
    endif()
    add_definitions(-D_FORTIFY_SOURCES=2)
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # TODO(bassosimone): add support for /Wall and /analyze
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} /WX /W4 /EHs")
    set(MK_LD_FLAGS "${MK_LD_FLAGS} /WX")
  else()
    message(FATAL_ERROR "Compiler not supported: ${CMAKE_CXX_COMPILER_ID}")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MK_COMMON_FLAGS} ${MK_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MK_COMMON_FLAGS} ${MK_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MK_LD_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MK_LD_FLAGS}")
  if("${WIN32}")
    add_definitions(-D_WIN32_WINNT=0x0600) # for NI_NUMERICSERV and WSAPoll
  endif()
endmacro()

MkSetCompilerFlags()

#
# finalize compiler
#

add_definitions(${CMAKE_REQUIRED_DEFINITIONS})
include_directories(${CMAKE_REQUIRED_INCLUDES})
link_libraries(${CMAKE_REQUIRED_LIBRARIES})
enable_testing()

#
# mkcurl-client
#

add_executable(
  mkcurl-client
  mkcurl-client.cpp
  mkcurl.cpp
)

#
# tests
#

add_executable(
  tests
  tests.cpp
)

#
# test: mocked_tests
#

add_test(
  NAME mocked_tests COMMAND
  tests
)

#
# test: tcp-fastopen
#

add_test(
  NAME tcp-fastopen COMMAND
  mkcurl-client --enable-tcp-fastopen https://www.kernel.org
)

#
# test: external_ca
#

add_test(
  NAME external_ca COMMAND
  mkcurl-client --ca-bundle-path ./.mkbuild/etc/ca-bundle.pem https://www.kernel.org
)

#
# test: http11_test
#

add_test(
  NAME http11_test COMMAND
  mkcurl-client https://ooni.torproject.org
)

#
# test: using_timeout
#

add_test(
  NAME using_timeout COMMAND
  mkcurl-client --timeout 10 --follow-redirect https://www.facebook.com
)

#
# test: http2_test
#

add_test(
  NAME http2_test COMMAND
  mkcurl-client --enable-http2 https://www.google.com
)

#
# test: redirect_test
#

add_test(
  NAME redirect_test COMMAND
  mkcurl-client --follow-redirect http://google.com
)

#
# test: post
#

add_test(
  NAME post COMMAND
  mkcurl-client --post --data "{\"net-tests\":[]}" https://httpbin.org/post
)

#
# test: put
#

add_test(
  NAME put COMMAND
  mkcurl-client --put --data "{\"net-tests\":[]}" https://httpbin.org/put
)

#
# test: connect_to
#

add_test(
  NAME connect_to COMMAND
  mkcurl-client --connect-to www.google.com https://www.youtube.com
)
