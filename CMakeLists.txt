# Autogenerated by `mkbuild`; DO NOT EDIT!

cmake_minimum_required(VERSION 3.12.0)
project("mkcurl")

include(CheckIncludeFileCXX)
include(CheckLibraryExists)
include(CheckCXXCompilerFlag)

set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)
set(CMAKE_C_EXTENSIONS OFF)

list(APPEND CMAKE_REQUIRED_LIBRARIES Threads::Threads)

if(("${WIN32}"))
  list(APPEND CMAKE_REQUIRED_LIBRARIES ws2_32 crypt32)
endif()

enable_testing()

if(("${WIN32}"))
  if(("${CMAKE_SIZEOF_VOID_P}" EQUAL 4))
    SET(MK_WIN32_ARCH "x86")
  elseif(("${CMAKE_SIZEOF_VOID_P}" EQUAL 8))
    SET(MK_WIN32_ARCH "x64")
  else()
    message(FATAL_ERROR "Neither 32 not 64 bit")
  endif()
endif()
if((${APPLE}))
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -I/usr/local/include")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -L/usr/local/lib")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -L/usr/local/lib")
endif()

#
# argh.h
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_1295)
if("${FAILURE_1295}")
  message(FATAL_ERROR "${FAILURE_1295}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/adishavit/argh/v1.3.1/argh.h")
file(DOWNLOAD https://raw.githubusercontent.com/adishavit/argh/v1.3.1/argh.h
  "${CMAKE_BINARY_DIR}/.mkbuild/include/argh.h"
  EXPECTED_HASH SHA256=ddb7dfc18dcf90149735b76fb2cff101067453a1df1943a6911233cb7085980c
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("argh.h" MK_HAVE_HEADER_1795)
if(NOT ("${MK_HAVE_HEADER_1795}"))
  message(FATAL_ERROR "cannot find: argh.h")
endif()

#
# catch.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_2119)
if("${FAILURE_2119}")
  message(FATAL_ERROR "${FAILURE_2119}")
endif()
message(STATUS "download: https://github.com/catchorg/Catch2/releases/download/v2.8.0/catch.hpp")
file(DOWNLOAD https://github.com/catchorg/Catch2/releases/download/v2.8.0/catch.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/catch.hpp"
  EXPECTED_HASH SHA256=2791047e459b981a1035f4ee16a2ad031f5bfb4ba66487ad4d3fc816c8946f61
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("catch.hpp" MK_HAVE_HEADER_2636)
if(NOT ("${MK_HAVE_HEADER_2636}"))
  message(FATAL_ERROR "cannot find: catch.hpp")
endif()

if(("${WIN32}"))

  #
  # windows-curl-7.61.1-1.tar.gz
  #

  message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_3017)
  if("${FAILURE_3017}")
    message(FATAL_ERROR "${FAILURE_3017}")
  endif()
  message(STATUS "download: https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz")
  file(DOWNLOAD https://github.com/measurement-kit/prebuilt/releases/download//testing/windows-curl-7.61.1-1.tar.gz
    "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    EXPECTED_HASH SHA256=424d2f18f0f74dd6a0128f0f4e59860b7d2f00c80bbf24b2702e9cac661357cf
    TLS_VERIFY ON)
  message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz")
  execute_process(COMMAND
    ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/windows-curl-7.61.1-1.tar.gz"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
    RESULT_VARIABLE FAILURE_3840)
  if("${FAILURE_3840}")
    message(FATAL_ERROR "${FAILURE_3840}")
  endif()
  LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/include")
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_4085)
  if(NOT ("${MK_HAVE_HEADER_4085}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib" "curl_easy_init" "" MK_HAVE_LIB_4244)
  if(NOT ("${MK_HAVE_LIB_4244}"))
    message(FATAL_ERROR "cannot find: ${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "${CMAKE_BINARY_DIR}/.mkbuild/download/MK_DIST/windows/curl/7.61.1-1/${MK_WIN32_ARCH}/lib/libcurl.lib")
  LIST(APPEND CMAKE_REQUIRED_DEFINITIONS -DCURL_STATICLIB)
else()
  CHECK_INCLUDE_FILE_CXX("curl/curl.h" MK_HAVE_HEADER_4802)
  if(NOT ("${MK_HAVE_HEADER_4802}"))
    message(FATAL_ERROR "cannot find: curl/curl.h")
  endif()
  CHECK_LIBRARY_EXISTS("curl" "curl_easy_init" "" MK_HAVE_LIB_4961)
  if(NOT ("${MK_HAVE_LIB_4961}"))
    message(FATAL_ERROR "cannot find: curl")
  endif()
  LIST(APPEND CMAKE_REQUIRED_LIBRARIES "curl")
endif()

#
# generic-assets-20190520205742.tar.gz
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/download")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_5385)
if("${FAILURE_5385}")
  message(FATAL_ERROR "${FAILURE_5385}")
endif()
message(STATUS "download: https://github.com/measurement-kit/generic-assets/releases/download/20190520205742/generic-assets-20190520205742.tar.gz")
file(DOWNLOAD https://github.com/measurement-kit/generic-assets/releases/download/20190520205742/generic-assets-20190520205742.tar.gz
  "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz"
  EXPECTED_HASH SHA256=70d590c20b2ed31fd43cc63709b267672fecfeac7e908d11e845664ddd43b04f
  TLS_VERIFY ON)
message(STATUS "Extract: ${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E tar xf "${CMAKE_BINARY_DIR}/.mkbuild/download/generic-assets-20190520205742.tar.gz"
  WORKING_DIRECTORY "${CMAKE_BINARY_DIR}/.mkbuild/download"
  RESULT_VARIABLE FAILURE_6246)
if("${FAILURE_6246}")
  message(FATAL_ERROR "${FAILURE_6246}")
endif()

#
# mkmock.hpp
#

message(STATUS "mkdirAll: ${CMAKE_BINARY_DIR}/.mkbuild/include")
execute_process(COMMAND
  ${CMAKE_COMMAND} -E make_directory "${CMAKE_BINARY_DIR}/.mkbuild/include"
  RESULT_VARIABLE FAILURE_6533)
if("${FAILURE_6533}")
  message(FATAL_ERROR "${FAILURE_6533}")
endif()
message(STATUS "download: https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp")
file(DOWNLOAD https://raw.githubusercontent.com/measurement-kit/mkmock/v0.2.0/mkmock.hpp
  "${CMAKE_BINARY_DIR}/.mkbuild/include/mkmock.hpp"
  EXPECTED_HASH SHA256=f07bc063a2e64484482f986501003e45ead653ea3f53fadbdb45c17a51d916d2
  TLS_VERIFY ON)
LIST(APPEND CMAKE_REQUIRED_INCLUDES "${CMAKE_BINARY_DIR}/.mkbuild/include")
CHECK_INCLUDE_FILE_CXX("mkmock.hpp" MK_HAVE_HEADER_7061)
if(NOT ("${MK_HAVE_HEADER_7061}"))
  message(FATAL_ERROR "cannot find: mkmock.hpp")
endif()

#
# Set restrictive compiler flags
#

macro(MKSetRestrictiveCompilerFlags)
  if(("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU") OR
     ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang"))
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Werror")
    # https://www.owasp.org/index.php/C-Based_Toolchain_Hardening_Cheat_Sheet
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wall")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wextra")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wconversion")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wcast-align")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat=2")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wformat-security")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fno-common")
    # Some options are only supported by GCC when we're compiling C code:
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-prototypes")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-prototypes")
    else()
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wmissing-prototypes")
      set(MK_C_FLAGS "${MK_C_FLAGS} -Wstrict-prototypes")
    endif()
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wmissing-declarations")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wstrict-overflow")
    if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
      set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -Wtrampolines")
    endif()
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Woverloaded-virtual")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wreorder")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wsign-promo")
    set(MK_CXX_FLAGS "${MK_CXX_FLAGS} -Wnon-virtual-dtor")
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} -fstack-protector-all")
    if(NOT "${APPLE}" AND NOT "${MINGW}")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,noexecstack")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,now")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,relro")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodlopen")
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -Wl,-z,nodump")
    elseif(("${MINGW}"))
      set(MK_LD_FLAGS "${MK_LD_FLAGS} -static")
    endif()
    add_definitions(-D_FORTIFY_SOURCES=2)
  elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # TODO(bassosimone): add support for /Wall and /analyze
    set(MK_COMMON_FLAGS "${MK_COMMON_FLAGS} /WX /W4 /EHs")
    set(MK_LD_FLAGS "${MK_LD_FLAGS} /WX")
  else()
    message(FATAL_ERROR "Compiler not supported: ${CMAKE_CXX_COMPILER_ID}")
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${MK_COMMON_FLAGS} ${MK_C_FLAGS}")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${MK_COMMON_FLAGS} ${MK_CXX_FLAGS}")
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${MK_LD_FLAGS}")
  set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${MK_LD_FLAGS}")
  if("${WIN32}")
    add_definitions(-D_WIN32_WINNT=0x0600) # for NI_NUMERICSERV and WSAPoll
  endif()
endmacro()

MKSetRestrictiveCompilerFlags()

#
# Prepare for compiling targets
#

add_definitions(${CMAKE_REQUIRED_DEFINITIONS})
include_directories(${CMAKE_REQUIRED_INCLUDES})

#
# mkcurl
#

add_library(
  mkcurl
  mkcurl.cpp
)
target_link_libraries(
  mkcurl
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# integration-tests
#

add_executable(
  integration-tests
  integration-tests.cpp
)
target_link_libraries(
  integration-tests
  mkcurl
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# mkcurl-client
#

add_executable(
  mkcurl-client
  mkcurl-client.cpp
)
target_link_libraries(
  mkcurl-client
  mkcurl
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# tests
#

add_executable(
  tests
  tests.cpp
)
target_link_libraries(
  tests
  ${CMAKE_REQUIRED_LIBRARIES}
)

#
# test: connect_to
#

add_test(
  NAME connect_to COMMAND mkcurl-client --connect-to www.google.com https://www.youtube.com
)

#
# test: external_ca
#

add_test(
  NAME external_ca COMMAND mkcurl-client --ca-bundle-path ./.mkbuild/download/ca-bundle.pem https://www.kernel.org
)

#
# test: http11_test
#

add_test(
  NAME http11_test COMMAND mkcurl-client https://ooni.torproject.org
)

#
# test: integration_tests
#

add_test(
  NAME integration_tests COMMAND integration-tests
)

#
# test: mocked_tests
#

add_test(
  NAME mocked_tests COMMAND tests
)

#
# test: post
#

add_test(
  NAME post COMMAND mkcurl-client --post --data "{\"net-tests\":[]}" https://httpbin.org/post
)

#
# test: put
#

add_test(
  NAME put COMMAND mkcurl-client --put --data "{\"net-tests\":[]}" https://httpbin.org/put
)

#
# test: redirect_test
#

add_test(
  NAME redirect_test COMMAND mkcurl-client --follow-redirect http://google.com
)

#
# test: reuseconnection
#

add_test(
  NAME reuseconnection COMMAND mkcurl-client https://www.google.com https://www.google.com/robots.txt https://www.google.com/favicon.ico
)

#
# test: using_timeout
#

add_test(
  NAME using_timeout COMMAND mkcurl-client --timeout 10 --follow-redirect https://www.facebook.com
)
